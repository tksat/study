{"ast":null,"code":"var _jsxFileName = \"/Users/ouchi/html/study/with-firebase-app/context/userContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport firebase from '../firebase/clientApp';\nexport const UserContext = createContext();\nexport default function UserContextComp({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loadingUser,\n    1: setLoadingUser\n  } = useState(true); // Helpful, to update the UI accordingly.\n\n  useEffect(() => {\n    // Listen authenticated user\n    const unsubscriber = firebase.auth().onAuthStateChanged(async user => {\n      try {\n        if (user) {\n          // User is signed in.\n          const {\n            uid,\n            displayName,\n            email,\n            photoURL\n          } = user; // You could also look for the user doc in your Firestore (if you have one):\n          // const userDoc = await firebase.firestore().doc(`users/${uid}`).get()\n\n          setUser({\n            uid,\n            displayName,\n            email,\n            photoURL\n          });\n        } else setUser(null);\n      } catch (error) {// Most probably a connection error. Handle appropriately.\n      } finally {\n        setLoadingUser(false);\n      }\n    }); // Unsubscribe auth listener on unmount\n\n    return () => unsubscriber();\n  }, []);\n  return __jsx(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      loadingUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, children);\n} // Custom hook that shorhands the context!\n\nexport const useUser = () => useContext(UserContext);","map":{"version":3,"sources":["/Users/ouchi/html/study/with-firebase-app/context/userContext.js"],"names":["useState","useEffect","createContext","useContext","firebase","UserContext","UserContextComp","children","user","setUser","loadingUser","setLoadingUser","unsubscriber","auth","onAuthStateChanged","uid","displayName","email","photoURL","error","useUser"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,aAA9B,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,OAAO,MAAMC,WAAW,GAAGH,aAAa,EAAjC;AAEP,eAAe,SAASI,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AACpD,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM;AAAA,OAACU,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAC,IAAD,CAA9C,CAFoD,CAEC;;AAErDC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMW,YAAY,GAAGR,QAAQ,CAACS,IAAT,GAAgBC,kBAAhB,CAAmC,MAAON,IAAP,IAAgB;AACtE,UAAI;AACF,YAAIA,IAAJ,EAAU;AACR;AACA,gBAAM;AAAEO,YAAAA,GAAF;AAAOC,YAAAA,WAAP;AAAoBC,YAAAA,KAApB;AAA2BC,YAAAA;AAA3B,cAAwCV,IAA9C,CAFQ,CAGR;AACA;;AACAC,UAAAA,OAAO,CAAC;AAAEM,YAAAA,GAAF;AAAOC,YAAAA,WAAP;AAAoBC,YAAAA,KAApB;AAA2BC,YAAAA;AAA3B,WAAD,CAAP;AACD,SAND,MAMOT,OAAO,CAAC,IAAD,CAAP;AACR,OARD,CAQE,OAAOU,KAAP,EAAc,CACd;AACD,OAVD,SAUU;AACRR,QAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,KAdoB,CAArB,CAFc,CAkBd;;AACA,WAAO,MAAMC,YAAY,EAAzB;AACD,GApBQ,EAoBN,EApBM,CAAT;AAsBA,SACE,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADF;AAKD,C,CAED;;AACA,OAAO,MAAMa,OAAO,GAAG,MAAMjB,UAAU,CAACE,WAAD,CAAhC","sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react'\nimport firebase from '../firebase/clientApp'\n\nexport const UserContext = createContext()\n\nexport default function UserContextComp({ children }) {\n  const [user, setUser] = useState(null)\n  const [loadingUser, setLoadingUser] = useState(true) // Helpful, to update the UI accordingly.\n\n  useEffect(() => {\n    // Listen authenticated user\n    const unsubscriber = firebase.auth().onAuthStateChanged(async (user) => {\n      try {\n        if (user) {\n          // User is signed in.\n          const { uid, displayName, email, photoURL } = user\n          // You could also look for the user doc in your Firestore (if you have one):\n          // const userDoc = await firebase.firestore().doc(`users/${uid}`).get()\n          setUser({ uid, displayName, email, photoURL })\n        } else setUser(null)\n      } catch (error) {\n        // Most probably a connection error. Handle appropriately.\n      } finally {\n        setLoadingUser(false)\n      }\n    })\n\n    // Unsubscribe auth listener on unmount\n    return () => unsubscriber()\n  }, [])\n\n  return (\n    <UserContext.Provider value={{ user, setUser, loadingUser }}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\n// Custom hook that shorhands the context!\nexport const useUser = () => useContext(UserContext)\n"]},"metadata":{},"sourceType":"module"}